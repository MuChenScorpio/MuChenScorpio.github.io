import{_ as a,c as s,o as e,d as n}from"./app.f06f7e70.js";const g=JSON.parse('{"title":"Typescript与Javascript有何不同？","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本类型的语法","slug":"基本类型的语法","link":"#基本类型的语法","children":[]},{"level":2,"title":"原始数据类型","slug":"原始数据类型","link":"#原始数据类型","children":[]},{"level":2,"title":"javascript基础及高阶目录","slug":"javascript基础及高阶目录","link":"#javascript基础及高阶目录","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"es6","slug":"es6","link":"#es6","children":[]},{"level":3,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":3,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[]},{"level":3,"title":"promise","slug":"promise","link":"#promise","children":[]}]},{"level":2,"title":"typescript相关目录","slug":"typescript相关目录","link":"#typescript相关目录","children":[]}],"relativePath":"blog/frontend/js/differ-ts.md"}'),l={name:"blog/frontend/js/differ-ts.md"},t=n(`<h1 id="typescript与javascript有何不同" tabindex="-1">Typescript与Javascript有何不同？ <a class="header-anchor" href="#typescript与javascript有何不同" aria-hidden="true">#</a></h1><p><span></span><span></span>TypeScript 其实就是类型化的 JavaScript，它不仅支持 JavaScript 的所有特性，还在 JavaScript 的基础上添加了静态类型注解扩展。</p><p><span></span><span></span>JavaScript 有原始数据类型 string、number等，但是在声明的时候都没有定义数据类型，TypeScript 会对赋值及其他所有操作默认做静态类型检测，也就是说TypeScript 其实就是 JavaScript 的超集</p><h2 id="基本类型的语法" tabindex="-1">基本类型的语法 <a class="header-anchor" href="#基本类型的语法" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">let &lt;变量名&gt;:&lt;数据类型&gt; = 值;</span></span>
<span class="line"><span style="color:#A6ACCD;">数据类型有：基本数据类型number、string、boolean、null、undefined、symbol;还可以混合类型声明</span></span>
<span class="line"><span style="color:#A6ACCD;">如：let &lt;变量名&gt;:&lt;数据类型1，数据类型2&gt; = 值</span></span>
<span class="line"><span style="color:#A6ACCD;">这里既可以满足数据类型1或者数据类型2任意一者即可</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Eggs：<code>let num:number = 1</code> ,<code>:number</code>这里就是定义的数据类型</p><h2 id="原始数据类型" tabindex="-1">原始数据类型 <a class="header-anchor" href="#原始数据类型" aria-hidden="true">#</a></h2><p><strong>字符串string</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">let firstname: string = &#39;Captain&#39;; // 字符串字面量</span></span>
<span class="line"><span style="color:#A6ACCD;">let familyname: string = String(&#39;S&#39;); // 显式类型转换</span></span>
<span class="line"><span style="color:#A6ACCD;">let fullname: string = \`my name is \${firstname}.\${familyname}\`; // 模板字符串</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>数字number</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">/** 十进制整数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let integer: number = 6;</span></span>
<span class="line"><span style="color:#A6ACCD;">/** 十进制整数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let integer2: number = Number(42);</span></span>
<span class="line"><span style="color:#A6ACCD;">/** 十进制浮点数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let decimal: number = 3.14;</span></span>
<span class="line"><span style="color:#A6ACCD;">/** 二进制整数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let binary: number = 0b1010;</span></span>
<span class="line"><span style="color:#A6ACCD;">/** 八进制整数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let octal: number = 0o744;</span></span>
<span class="line"><span style="color:#A6ACCD;">/** 十六进制整数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let hex: number = 0xf00d;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;!-- 遇到比较大的整数的时候可以用big --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">let big: bigint =  100n;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>布尔值boolean</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">/** TypeScript true为 真 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let TypeScriptIsGreat: boolean = true;</span></span>
<span class="line"><span style="color:#A6ACCD;"> /** TypeScript false 为 否 */</span></span>
<span class="line"><span style="color:#A6ACCD;">let TypeScriptIsBad: boolean = false;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>Symbol</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>bigint</strong></p><p><strong>undefined</strong></p><p><strong>null</strong></p><h2 id="javascript基础及高阶目录" tabindex="-1">javascript基础及高阶目录 <a class="header-anchor" href="#javascript基础及高阶目录" aria-hidden="true">#</a></h2><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-hidden="true">#</a></h3><p><a href="./Array/array-style.html">如何判断数组的类型</a></p><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-hidden="true">#</a></h3><p><a href="./Object/object-inside.html">Javascript内置的可迭代对象</a></p><p><a href="./Object/object-time.html">探究时间对象的相关问题</a></p><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h3><p><a href="./Array/array-ways.html">数组、对象、字符串常见方法</a></p><h3 id="es6" tabindex="-1">es6 <a class="header-anchor" href="#es6" aria-hidden="true">#</a></h3><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-hidden="true">#</a></h3><h3 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-hidden="true">#</a></h3><h3 id="promise" tabindex="-1">promise <a class="header-anchor" href="#promise" aria-hidden="true">#</a></h3><h2 id="typescript相关目录" tabindex="-1">typescript相关目录 <a class="header-anchor" href="#typescript相关目录" aria-hidden="true">#</a></h2>`,31),p=[t];function i(r,c,o,d,h,C){return e(),s("div",null,p)}const A=a(l,[["render",i]]);export{g as __pageData,A as default};
