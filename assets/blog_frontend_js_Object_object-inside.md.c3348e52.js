import{_ as s,c as a,o as e,d as n}from"./app.f06f7e70.js";const y=JSON.parse('{"title":"js内置的可迭代对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"数组Arrays","slug":"数组arrays","link":"#数组arrays","children":[]},{"level":2,"title":"字符串Strings","slug":"字符串strings","link":"#字符串strings","children":[]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[]},{"level":2,"title":"Set","slug":"set","link":"#set","children":[]},{"level":2,"title":"arguments","slug":"arguments","link":"#arguments","children":[]},{"level":2,"title":"Typed Arrays","slug":"typed-arrays","link":"#typed-arrays","children":[]},{"level":2,"title":"Generators，ES6新增加","slug":"generators-es6新增加","link":"#generators-es6新增加","children":[]}],"relativePath":"blog/frontend/js/Object/object-inside.md"}'),l={name:"blog/frontend/js/Object/object-inside.md"},t=n(`<h1 id="js内置的可迭代对象" tabindex="-1">js内置的可迭代对象 <a class="header-anchor" href="#js内置的可迭代对象" aria-hidden="true">#</a></h1><blockquote><p>ES6中引入了迭代器和可迭代对象，并提出对迭代对象的支持（for···of循环、Map(iterable)构造器等···）</p><p>也就是说一个数据结构只要具有symbol.iterator属性，就可以认为是可迭代的(iterable)</p><p>因此 js可迭代对象有：<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>Typed Array</code>、<code>函数的arguements</code>、<code>NodeList对象</code></p></blockquote><h2 id="数组arrays" tabindex="-1">数组Arrays <a class="header-anchor" href="#数组arrays" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console.log([][Symbol.iterator])</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">for(let x of [&#39;a&#39;,&#39;b&#39;])</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(x)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="字符串strings" tabindex="-1">字符串Strings <a class="header-anchor" href="#字符串strings" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console.log(&quot;&quot;[Symbol.iterator])</span></span>
<span class="line"><span style="color:#A6ACCD;">for(let x of &quot;abc&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(x)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">let map = new Map().set(&#39;a&#39;, 1).set(&#39;b&#39;, 2);</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(map[Symbol.iterator]);</span></span>
<span class="line"><span style="color:#A6ACCD;">for (let pair of map) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(pair);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">let set = new Set().add(&#39;a&#39;).add(&#39;b&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">for (let x of set) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(x);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="arguments" tabindex="-1">arguments <a class="header-anchor" href="#arguments" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">function printArgs() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  for (let x of arguments) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(x);</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">printArgs(&#39;a&#39;, &#39;b&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="typed-arrays" tabindex="-1">Typed Arrays <a class="header-anchor" href="#typed-arrays" aria-hidden="true">#</a></h2><h2 id="generators-es6新增加" tabindex="-1">Generators，ES6新增加 <a class="header-anchor" href="#generators-es6新增加" aria-hidden="true">#</a></h2>`,14),o=[t];function r(p,c,i,d,h,C){return e(),a("div",null,o)}const g=s(l,[["render",r]]);export{y as __pageData,g as default};
